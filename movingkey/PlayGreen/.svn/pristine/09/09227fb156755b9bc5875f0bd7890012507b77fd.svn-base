package kr.innisfree.playgreen.ImageFilter.glideTransformation;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;

import com.bumptech.glide.Glide;
import com.bumptech.glide.load.Transformation;
import com.bumptech.glide.load.engine.Resource;
import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;
import com.bumptech.glide.load.resource.bitmap.BitmapResource;

import jp.co.cyberagent.android.gpuimage.GPUImage;
import jp.co.cyberagent.android.gpuimage.GPUImageAlphaBlendFilter;
import jp.co.cyberagent.android.gpuimage.GPUImageContrastFilter;
import jp.co.cyberagent.android.gpuimage.GPUImageExposureFilter;
import jp.co.cyberagent.android.gpuimage.GPUImageGammaFilter;
import jp.co.cyberagent.android.gpuimage.GPUImageGrayscaleFilter;
import jp.co.cyberagent.android.gpuimage.GPUImageSaturationFilter;
import kr.innisfree.playgreen.R;

/**
 * Created by wonderland on 16. 4. 14..
 */
public class EarthTransformation implements Transformation<Bitmap> {

    private Context mContext;
    private BitmapPool mBitmapPool;

    public EarthTransformation(Context context) {
        this(context, Glide.get(context).getBitmapPool());
    }


    public EarthTransformation(Context context, BitmapPool pool) {
        mContext = context.getApplicationContext();
        pool.clearMemory();
        mBitmapPool = pool;
    }

    @Override
    public Resource<Bitmap> transform(Resource<Bitmap> resource, int outWidth, int outHeight) {

        Bitmap source = resource.get();

        /** alpha blend **/
        BitmapFactory.Options options = new BitmapFactory.Options();
        options.inSampleSize = 5;
        Bitmap filterBitmap = BitmapFactory.decodeResource(mContext.getResources(), R.drawable.filter_earth, options);

        GPUImageAlphaBlendFilter alphaBlendFilter = new GPUImageAlphaBlendFilter();
        alphaBlendFilter.setBitmap(filterBitmap);
        alphaBlendFilter.setMix(0.2f);

        GPUImage gpuImageWithAlphaBlend = new GPUImage(mContext);
        gpuImageWithAlphaBlend.setImage(source);
        gpuImageWithAlphaBlend.setFilter(alphaBlendFilter);

        Bitmap bitmapWithAlphaBlend = gpuImageWithAlphaBlend.getBitmapWithFilterApplied();

        /** source recycle **/
        source.recycle();

        /** contrast **/
        GPUImageContrastFilter contrastFilter = new GPUImageContrastFilter();
        contrastFilter.setContrast(1.3f);

        GPUImage gpuImageWithContrast = new GPUImage(mContext);
        gpuImageWithContrast.setImage(bitmapWithAlphaBlend);
        gpuImageWithContrast.setFilter(contrastFilter);

        Bitmap bitmapWithContrast = gpuImageWithContrast.getBitmapWithFilterApplied();

        /** alphablend recycle **/
        bitmapWithAlphaBlend.recycle();

        /** saturation **/
        GPUImageSaturationFilter saturationFilter = new GPUImageSaturationFilter();
        saturationFilter.setSaturation(1.3f);

        GPUImage playGpuImage = new GPUImage(mContext);
        playGpuImage.setImage(bitmapWithContrast);
        playGpuImage.setFilter(saturationFilter);

        Bitmap resultBitmap = playGpuImage.getBitmapWithFilterApplied();

        bitmapWithContrast.recycle();

        return BitmapResource.obtain(resultBitmap, mBitmapPool);
    }

    @Override
    public String getId() {
        return "EarthTransformation";
    }

}
