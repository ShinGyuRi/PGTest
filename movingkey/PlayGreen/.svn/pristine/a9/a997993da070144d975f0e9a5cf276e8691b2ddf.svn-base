package kr.innisfree.playgreen.ImageFilter.glideTransformation;

import android.content.Context;
import android.graphics.Bitmap;

import com.bumptech.glide.Glide;
import com.bumptech.glide.load.Transformation;
import com.bumptech.glide.load.engine.Resource;
import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;
import com.bumptech.glide.load.resource.bitmap.BitmapResource;

import jp.co.cyberagent.android.gpuimage.GPUImage;
import jp.co.cyberagent.android.gpuimage.GPUImageColorBalanceFilter;
import jp.co.cyberagent.android.gpuimage.GPUImageExposureFilter;
import jp.co.cyberagent.android.gpuimage.GPUImageLevelsFilter;
import jp.co.cyberagent.android.gpuimage.GPUImageToneCurveFilter;

/**
 * Created by wonderland on 16. 4. 14..
 */
public class GreenPermissionformation implements Transformation<Bitmap> {

    private Context mContext;
    private BitmapPool mBitmapPool;

    public GreenPermissionformation(Context context) {
        this(context, Glide.get(context).getBitmapPool());
    }


    public GreenPermissionformation(Context context, BitmapPool pool) {
        mContext = context.getApplicationContext();
        pool.clearMemory();
        mBitmapPool = pool;
    }

    @Override
    public Resource<Bitmap> transform(Resource<Bitmap> resource, int outWidth, int outHeight) {
        Bitmap source = resource.get();

//        int width = source.getWidth();
//        int height = source.getHeight();
//        int scaledWidth = width / mSampling;
//        int scaledHeight = height / mSampling;
//
//        DoColorFilter colorFilter = new DoColorFilter(source, 0.7, 0.59, 0.4);
//        source = colorFilter.executeFilter();
//        source = ImageFilterUtil.updateSaturation(source, 1.3f);
//        DoBrightness doBrightness00 = new DoBrightness(source, 65);
//        source = doBrightness00.executeFilter();
//        source = ImageFilterUtil.updateExposure(source, 0.5f);
//        DoGamma doGamma00 = new DoGamma(source, 0.82, 0.82, 0.82);
//        source = doGamma00.executeFilter();

        /** color balance **/
        GPUImageColorBalanceFilter colorBalanceFilter = new GPUImageColorBalanceFilter();
        colorBalanceFilter.setMidtones(new float[]{-0.02f, -0.07f, 0.16f});

        GPUImage colorBalanceFilterGPUImage = new GPUImage(mContext);
        colorBalanceFilterGPUImage.setImage(source);
        colorBalanceFilterGPUImage.setFilter(colorBalanceFilter);
        Bitmap colorBalanceFilterBitmap = colorBalanceFilterGPUImage.getBitmapWithFilterApplied();

        /** source recycle **/
        source.recycle();

        /** curve balance **/
        GPUImageToneCurveFilter gpuImageToneCurveFilter = new GPUImageToneCurveFilter();

        /** exposure recycle **/
//        exposureFilterBitmap.recycle();
//
//        /** color **/
//        GPUImageColorMatrixFilter colorMatrixFilter = new GPUImageColorMatrixFilter();
//        colorMatrixFilter.setColorMatrix();

        Bitmap result = colorBalanceFilterBitmap;

        /** color balance bitmap recycle **/
//        colorBalanceFilterBitmap.recycle();

        return BitmapResource.obtain(result, mBitmapPool);
    }

    @Override
    public String getId() {
        return "GreenPermissionformation";
    }

}
