package kr.innisfree.playgreen.activity.setting;

import android.app.AlertDialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.os.Bundle;
import android.support.v7.widget.Toolbar;
import android.view.View;
import android.widget.TextView;

import com.ParentAct;
import com.android.volley.RequestQueue;
import com.android.volley.Response;
import com.android.volley.VolleyError;
import com.google.android.gms.gcm.GoogleCloudMessaging;
import com.google.android.gms.iid.InstanceID;
import com.google.gson.Gson;
import com.moyusoft.util.Definitions;
import com.moyusoft.util.Definitions.YN;
import com.moyusoft.util.JYLog;
import com.moyusoft.util.TextUtil;
import com.moyusoft.util.Util;
import com.navercorp.volleyextensions.volleyer.Volleyer;
import com.navercorp.volleyextensions.volleyer.builder.PostBuilder;
import com.navercorp.volleyextensions.volleyer.factory.DefaultRequestQueueFactory;
import com.volley.network.NetworkConstantUtil;
import com.volley.network.NetworkConstantUtil.APIKEY;
import com.volley.network.NetworkErrorUtill;
import com.volley.network.dto.NetworkData;
import com.volley.network.dto.NetworkJson;

import org.greenrobot.eventbus.EventBus;
import org.greenrobot.eventbus.Subscribe;

import java.io.IOException;

import kr.innisfree.playgreen.R;
import kr.innisfree.playgreen.activity.user.FriendAddAct;
import kr.innisfree.playgreen.activity.user.LoginAct;
import kr.innisfree.playgreen.common.PlaygreenManager;
import kr.innisfree.playgreen.data.PlayGreenEvent;

/**
 * Created by jooyoung on 2016-03-16.
 */
public class SettingAct extends ParentAct implements View.OnClickListener {

	private NetworkData userData;
	private TextView txtLastLogin;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.act_setting);
		if (!EventBus.getDefault().isRegistered(this)) EventBus.getDefault().register(this);
		setLoading(this, true);
		initToolbar();

		txtLastLogin = (TextView) findViewById(R.id.txt_last_login);
		findViewById(R.id.layout_change_pw).setOnClickListener(this);
		findViewById(R.id.layout_block_user_list).setOnClickListener(this);
		findViewById(R.id.layout_manage_account).setOnClickListener(this);
		findViewById(R.id.layout_find_friend).setOnClickListener(this);
		//findViewById(R.id.layout_alarm).setOnClickListener(this);
		//findViewById(R.id.layout_save_original_photo).setOnClickListener(this);
		findViewById(R.id.layout_remove_search_history).setOnClickListener(this);
		//findViewById(R.id.layout_save_data).setOnClickListener(this);
		findViewById(R.id.layout_notice).setOnClickListener(this);
		findViewById(R.id.layout_program_info).setOnClickListener(this);
		findViewById(R.id.layout_help).setOnClickListener(this);
		findViewById(R.id.layout_logout).setOnClickListener(this);

		findViewById(R.id.btn_alarm).setOnClickListener(this);
		findViewById(R.id.btn_save_original_photo).setOnClickListener(this);
		findViewById(R.id.btn_save_data).setOnClickListener(this);

		initialize();
	}

	private void initToolbar() {
		Toolbar mToolbar = (Toolbar) findViewById(R.id.toolbar);
		findViewById(R.id.layout_back).setOnClickListener(this);
		setSupportActionBar(mToolbar);
		getSupportActionBar().setDisplayShowTitleEnabled(false);
	}

	public void initialize() {
		userData = PlaygreenManager.getUserInfo();
		if (userData == null) return;

		if (!TextUtil.isNull(userData.PUSH_YN) && userData.PUSH_YN.equals(YN.YES)) {
			findViewById(R.id.btn_alarm).setSelected(true);
		} else {
			findViewById(R.id.btn_alarm).setSelected(false);
		}
		if (!TextUtil.isNull(userData.ORIGIN_SAVE_YN) && userData.ORIGIN_SAVE_YN.equals(YN.YES)) {
			findViewById(R.id.btn_save_original_photo).setSelected(true);
		} else {
			findViewById(R.id.btn_save_original_photo).setSelected(false);
		}
		if (!TextUtil.isNull(userData.DATA_SAVING_YN) && userData.DATA_SAVING_YN.equals(YN.YES)) {
			findViewById(R.id.btn_save_data).setSelected(true);
		} else {
			findViewById(R.id.btn_save_data).setSelected(false);
		}

		String lastLoginInfo = getString(R.string.str_last_login_info, PlaygreenManager.getTimeStampToDate(userData.LAST_LOGIN_DT, true));
		txtLastLogin.setText(lastLoginInfo);
	}

	@Override
	public void onClick(View view) {
		Intent intent = null;
		switch (view.getId()) {
			case R.id.layout_back:
				onBackPressed();
				break;
			case R.id.layout_change_pw:
				intent = new Intent(this, PasswordChangeAct.class);
				Util.moveActivity(this, intent, -1, -1, false, false);
				break;
			case R.id.layout_block_user_list:
				intent = new Intent(this, BlockUserListAct.class);
				Util.moveActivity(this, intent, -1, -1, false, false);
				break;
			case R.id.layout_manage_account:
				intent = new Intent(this, ManageAccountAct.class);
				Util.moveActivity(this, intent, -1, -1, false, false);
				break;
			case R.id.layout_find_friend:
				Intent i = new Intent(this, FriendAddAct.class);
				Util.moveActivity(this, i, -1, -1, false, false);
				break;
			case R.id.btn_alarm:
				if (view.isSelected()) userData.PUSH_YN = YN.NO;
				else userData.PUSH_YN = YN.YES;
				requestUpdateUser(userData);
				break;
			case R.id.btn_save_original_photo:
				if (view.isSelected()) userData.ORIGIN_SAVE_YN = YN.NO;
				else userData.ORIGIN_SAVE_YN = YN.YES;
				requestUpdateUser(userData);
				break;
			case R.id.btn_save_data:
				if (view.isSelected()) userData.DATA_SAVING_YN = YN.NO;
				else userData.DATA_SAVING_YN = YN.YES;
				requestUpdateUser(userData);
				break;
			case R.id.layout_remove_search_history:
				showDeleteSearchLog();
				break;
			case R.id.layout_notice:
				intent = new Intent(this, NoticeAct.class);
				Util.moveActivity(this, intent, -1, -1, false, false);
				break;
			case R.id.layout_program_info:
				intent = new Intent(this, ProgramInfoAct.class);
				Util.moveActivity(this, intent, -1, -1, false, false);
				break;
			case R.id.layout_help:
				intent = new Intent(this, HelpAct.class);
				Util.moveActivity(this, intent, -1, -1, false, false);
				break;
			case R.id.layout_logout:
				showLogoutConfirm();
				break;
		}
	}

	public void showLogoutConfirm() {
		AlertDialog.Builder dialog = new AlertDialog.Builder(this);
		dialog
				.setMessage(R.string.str_logout_confirm_message)
				.setNegativeButton(R.string.str_cancel, null)
				.setPositiveButton(R.string.str_confirm, new DialogInterface.OnClickListener() {
					@Override
					public void onClick(DialogInterface dialog, int which) {
						netFunc.requestLogout();
//						try {
//							InstanceID.getInstance(SettingAct.this).deleteInstanceID();
//							InstanceID.getInstance(SettingAct.this).deleteToken(getString(R.string.gcm_defaultSenderId), GoogleCloudMessaging.INSTANCE_ID_SCOPE);
//						}catch (IOException e){
//							e.printStackTrace();
//						}
//						Definitions.ALARM_COUNT = 0;
//						PlaygreenManager.updateIconBadge(SettingAct.this);
//						PlaygreenManager.removeUserInfo();
//						setResult(RESULT_OK);
//						Intent intent = new Intent(SettingAct.this, LoginAct.class);
//						Util.moveActivity(SettingAct.this, intent, -1, -1, true, false);
					}
				})
				.show();
	}

	public void showDeleteSearchLog() {
		AlertDialog.Builder dialog = new AlertDialog.Builder(this);
		dialog
				.setMessage(R.string.str_delete_search_history_confirm_message)
				.setNegativeButton(R.string.str_cancel, null)
				.setPositiveButton(R.string.str_confirm, new DialogInterface.OnClickListener() {
					@Override
					public void onClick(DialogInterface dialog, int which) {
						netFunc.requestRemoveHistory("T",null);
						netFunc.requestRemoveHistory("M",null);
					}
				})
				.show();
	}

	@Override
	public void onNetworkResult(int idx, NetworkJson json) {
		super.onNetworkResult(idx, json);
		switch (idx) {
			case APIKEY.UPDATE_MEMBER:
				PlaygreenManager.saveUserInfo(json.DATA);
				initialize();
				break;
			case APIKEY.SEARCH_DELETE:
				break;
			case APIKEY.LOGOUT:
				try {
					InstanceID.getInstance(SettingAct.this).deleteInstanceID();
					InstanceID.getInstance(SettingAct.this).deleteToken(getString(R.string.gcm_defaultSenderId), GoogleCloudMessaging.INSTANCE_ID_SCOPE);
				}catch (IOException e){
					e.printStackTrace();
				}
				Definitions.ALARM_COUNT = 0;
				PlaygreenManager.updateIconBadge(SettingAct.this);
				PlaygreenManager.removeUserInfo();
				setResult(RESULT_OK);
				Intent intent = new Intent(SettingAct.this, LoginAct.class);
				Util.moveActivity(SettingAct.this, intent, -1, -1, true, false);
				break;
		}
	}

	@Override
	public void onNetworkError(int idx, VolleyError error, NetworkJson json) {
		super.onNetworkError(idx, error, json);
	}

	public void requestUpdateUser(NetworkData userData) {
		showLoading();
		final RequestQueue q = DefaultRequestQueueFactory.create(this);
		q.start();
		PostBuilder pb = Volleyer.volleyer(q).post(NetworkConstantUtil.URLS.UPDATE_MEMBER).addStringPart("AUTH_TOKEN", PlaygreenManager.getAuthToken());
		if (!TextUtil.isNull(userData.PUSH_YN))
			pb.addStringPart("PUSH_YN", userData.PUSH_YN);
		if (!TextUtil.isNull(userData.ORIGIN_SAVE_YN))
			pb.addStringPart("ORIGIN_SAVE_YN", userData.ORIGIN_SAVE_YN);
		if (!TextUtil.isNull(userData.DATA_SAVING_YN))
			pb.addStringPart("DATA_SAVING_YN", userData.DATA_SAVING_YN);
		pb.withListener(new Response.Listener<String>() {
			@Override
			public void onResponse(String response) {
				JYLog.D("NETWORK", response.trim(), new Throwable());
				hideLoading();
				Gson gson = new Gson();
				NetworkJson networkJson = gson.fromJson(response, NetworkJson.class);
				if (NetworkErrorUtill.isJsonResultCheck(networkJson)) {
					onNetworkResult(APIKEY.UPDATE_MEMBER, networkJson);
				} else {
				}
				q.stop();
			}
		}).withErrorListener(new Response.ErrorListener() {
			@Override
			public void onErrorResponse(VolleyError arg0) {
				JYLog.D("NETWORK", arg0.getMessage(), new Throwable());
				hideLoading();
				q.stop();
			}
		}).execute();
	}

	@Subscribe
	public void onEvent(PlayGreenEvent event) {
		if (event.getEvent() == PlayGreenEvent.EVENT_TYPE.LEAVE_MEMBER) {
			PlaygreenManager.removeUserInfo();
			setResult(RESULT_OK);
			Intent intent = new Intent(SettingAct.this, LoginAct.class);
			Util.moveActivity(SettingAct.this, intent, -1, -1, true, false);
		}
	}

	@Override
	protected void onDestroy() {
		super.onDestroy();
		EventBus.getDefault().unregister(this);
	}

	//permissionCheck( new String[]{Manifest.permission.CAMERA, Manifest.permission.WRITE_EXTERNAL_STORAGE}, Definitions.ACTIVITY_REQUEST_CODE.PERMISSION_ABOUT_CAMERA);
	@Override
	public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {
		super.onRequestPermissionsResult(requestCode, permissions, grantResults);
	}

}
