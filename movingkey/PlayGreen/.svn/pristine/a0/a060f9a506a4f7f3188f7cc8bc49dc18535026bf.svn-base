package kr.innisfree.playgreen.ImageFilter.glideTransformation;

import android.content.Context;
import android.graphics.Bitmap;

import com.bumptech.glide.Glide;
import com.bumptech.glide.load.Transformation;
import com.bumptech.glide.load.engine.Resource;
import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;
import com.bumptech.glide.load.resource.bitmap.BitmapResource;

import jp.co.cyberagent.android.gpuimage.GPUImage;
import jp.co.cyberagent.android.gpuimage.GPUImageExposureFilter;
import jp.co.cyberagent.android.gpuimage.GPUImageGammaFilter;
import jp.co.cyberagent.android.gpuimage.GPUImageGrayscaleFilter;

/**
 * Created by wonderland on 16. 4. 14..
 */
public class InstacharmTransformation implements Transformation<Bitmap> {

    private Context mContext;
    private BitmapPool mBitmapPool;

    public InstacharmTransformation(Context context) {
        this(context, Glide.get(context).getBitmapPool());
    }


    public InstacharmTransformation(Context context, BitmapPool pool) {
        mContext = context.getApplicationContext();
        mBitmapPool = pool;

        mBitmapPool.clearMemory();
    }

    @Override
    public Resource<Bitmap> transform(Resource<Bitmap> resource, int outWidth, int outHeight) {

        Bitmap source = resource.get();

        /** color balance **/
        GPUImageGrayscaleFilter gpuImageGrayscaleFilter = new GPUImageGrayscaleFilter();

        GPUImage gpuImageGrayscaleFilterGPUImage = new GPUImage(mContext);
        gpuImageGrayscaleFilterGPUImage.setImage(source);
        gpuImageGrayscaleFilterGPUImage.setFilter(gpuImageGrayscaleFilter);
        Bitmap gpuImageGrayscaleFilterBitmap = gpuImageGrayscaleFilterGPUImage.getBitmapWithFilterApplied();

        /** source recycle **/
        source.recycle();

        /** exposure **/
        GPUImageExposureFilter gpuImageExposureFilter = new GPUImageExposureFilter();
        gpuImageExposureFilter.setExposure(0.355f);

        GPUImage gpuImageExposureFilterGPUImage = new GPUImage(mContext);
        gpuImageExposureFilterGPUImage.setImage(gpuImageGrayscaleFilterBitmap);
        gpuImageExposureFilterGPUImage.setFilter(gpuImageExposureFilter);
        Bitmap gpuImageExposureBitmap = gpuImageExposureFilterGPUImage.getBitmapWithFilterApplied();

        /** gpuImageGrayscaleFilterBitmap recycle **/
        gpuImageGrayscaleFilterBitmap.recycle();

        /** gamma **/
        GPUImageGammaFilter gpuImageGammaFilter = new GPUImageGammaFilter();
        gpuImageGammaFilter.setGamma(1.8f);

        GPUImage gpuImageGammaFilterGPUImage = new GPUImage(mContext);
        gpuImageGammaFilterGPUImage.setImage(gpuImageExposureBitmap);
        gpuImageGammaFilterGPUImage.setFilter(gpuImageGammaFilter);
        Bitmap gpuImageGammaBitmap = gpuImageGammaFilterGPUImage.getBitmapWithFilterApplied();

        /** gpuImageExposureBitmap recycle **/
        gpuImageExposureBitmap.recycle();

        return BitmapResource.obtain(gpuImageGammaBitmap, mBitmapPool);
    }

    @Override
    public String getId() {
        return "GreenPermissionformation";
    }

}
