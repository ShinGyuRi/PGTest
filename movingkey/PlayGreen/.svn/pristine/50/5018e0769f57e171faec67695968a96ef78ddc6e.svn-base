package kr.innisfree.playgreen.adapter;

import android.content.Context;
import android.media.MediaPlayer;
import android.os.Build;
import android.os.Handler;
import android.support.v7.widget.RecyclerView;
import android.text.SpannableString;
import android.text.Spanned;
import android.text.TextPaint;
import android.text.TextUtils;
import android.text.method.LinkMovementMethod;
import android.text.style.ClickableSpan;
import android.util.SparseBooleanArray;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.ProgressBar;
import android.widget.RelativeLayout;
import android.widget.TextView;

import com.bumptech.glide.Glide;
import com.moyusoft.util.BitmapCircleResize;
import com.moyusoft.util.BitmapHeightResizeForGlide;
import com.moyusoft.util.Definitions.YN;
import com.moyusoft.util.JYLog;
import com.moyusoft.util.TextUtil;
import com.moyusoft.util.ToforUtil;
import com.moyusoft.util.UIUtils;
import com.sprylab.android.widget.TextureVideoView;
import com.squareup.picasso.Picasso;
import com.volley.network.dto.NetworkData;

import java.net.URLDecoder;
import java.util.ArrayList;

import kr.innisfree.playgreen.R;
import kr.innisfree.playgreen.common.PlaygreenManager;
import kr.innisfree.playgreen.common.view.ExpandableTextView;
import kr.innisfree.playgreen.listener.AdapterItemClickListener;

/**
 * Created by jooyoung on 2016-02-19.
 */
public class TimelineAdapter extends RecyclerView.Adapter<TimelineAdapter.ViewHolder> {
    private Context context;
    private ArrayList<NetworkData> itemArray;
    private AdapterItemClickListener adapterItemClickListener;
    private SparseBooleanArray mCollapsedStatus;
    private boolean isClickImgContent = false;

    public TimelineAdapter(Context context) {
        this.context = context;
        mCollapsedStatus = new SparseBooleanArray();
    }

    public void setAdapterItemClickListener(AdapterItemClickListener listener) {
        this.adapterItemClickListener = listener;
    }

    public void setItemArray(ArrayList<NetworkData> array) {
        if (itemArray == null || itemArray.size() == 0) {
            this.itemArray = array;
        } else {
            itemArray.addAll(array);
        }
        notifyDataSetChanged();
    }

    public void clearItemArray() {
        if (itemArray != null && itemArray.size() > 0)
            itemArray.clear();
    }

    public void removeItem(NetworkData data) {
        if (itemArray != null) {
            if (itemArray.contains(data)) {
                int index = itemArray.indexOf(data);
                itemArray.remove(index);
                notifyItemRemoved(index);
            }
        }
    }

    public ArrayList<NetworkData> getItemArray() {
        return itemArray;
    }

    @Override
    public ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
        View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.item_timeline, parent, false);
        ViewHolder vh = new ViewHolder(view);
        return vh;
    }

    @Override
    public void onBindViewHolder(final ViewHolder holder, final int position) {
        if (itemArray == null || itemArray.size() <= position) return;
        final NetworkData item = itemArray.get(position);
        /**
         * 시네마그래프일 때,
         * 동영상의 첫 프레임 원본 이미지 : TIMELINE_MP4_SCENE
         * 브러쉬가 적용된 이미지 : TIMELINE_IMG --> 그래서 시네마그래프이든 이미지이든 TIMELINE_IMG를 보여주면 됩니다.
         * 브러쉬 이미지가 나타내줘야될 imageview : imgContent
         * 동영상의 첫 프레임 원본 이미지가 나타내줘야될 imageview : imgMp4Scene
         */
//		if (!TextUtil.isNull(item.TIMELINE_MP4_SCENE)) {
//			int newWidth, newHeight;
//			newWidth = ToforUtil.PHONE_W;
//			newHeight = Math.round(((float) newWidth / item.TIMELINE_IMG_WIDTH * item.TIMELINE_IMG_HEIGHT));
//			JYLog.D(position + ".TIMELINE_MP4_SCENE::h:" + item.TIMELINE_IMG_HEIGHT + "//newheight:" + newHeight, new Throwable());
//			RelativeLayout.LayoutParams layoutParams = new RelativeLayout.LayoutParams(newWidth, newHeight);
//			holder.imgMp4Scene.setLayoutParams(layoutParams);
//			Glide.with(context).load(item.TIMELINE_MP4_SCENE).bitmapTransform(new BitmapHeightResizeForGlide(context, newHeight)).into(holder.imgContent);
//			Glide.with(context).load(item.TIMELINE_IMG).bitmapTransform(new BitmapHeightResizeForGlide(context, newHeight)).into(holder.imgMp4Scene);
////			Glide.with(context).load(item.TIMELINE_MP4_SCENE).bitmapTransform(new BitmapHeightResizeForGlide(context, newHeight)).into(holder.imgMp4Scene);
//		}
//        if (!TextUtil.isNull(item.TIMELINE_IMG)) {
//            int newWidth, newHeight;
//            newWidth = ToforUtil.PHONE_W;
//            newHeight = Math.round(((float) newWidth / item.TIMELINE_IMG_WIDTH * item.TIMELINE_IMG_HEIGHT));
//            RelativeLayout.LayoutParams layoutParams = new RelativeLayout.LayoutParams(newWidth, newHeight);
//            holder.imgContent.setLayoutParams(layoutParams);
//            Glide.with(context).load(item.TIMELINE_IMG).bitmapTransform(new BitmapHeightResizeForGlide(context, newHeight)).into(holder.imgContent);
//        }

        if (!TextUtil.isNull(item.TIMELINE_MP4)) {
            /** 시네마그래프일 때, **/

            if (!TextUtil.isNull(item.TIMELINE_IMG)) {
                /** 동영상 첫 프레임 원본 이미지 **/
                int newWidth, newHeight;
                newWidth = ToforUtil.PHONE_W;
                newHeight = Math.round(((float) newWidth / item.TIMELINE_IMG_WIDTH * item.TIMELINE_IMG_HEIGHT));
                RelativeLayout.LayoutParams layoutParams = new RelativeLayout.LayoutParams(newWidth, newHeight);
                holder.imgMp4Scene.setLayoutParams(layoutParams);
                Glide.with(context).load(item.TIMELINE_IMG).bitmapTransform(new BitmapHeightResizeForGlide(context, newHeight)).into(holder.imgMp4Scene);
            }
            if (!TextUtil.isNull(item.TIMELINE_MP4_SCENE)) {
                /** 브러쉬가 적용된 이미지 **/
                int newWidth, newHeight;
                newWidth = ToforUtil.PHONE_W;
                newHeight = Math.round(((float) newWidth / item.TIMELINE_IMG_WIDTH * item.TIMELINE_IMG_HEIGHT));
                JYLog.D(position + ".TIMELINE_MP4_SCENE::h:" + item.TIMELINE_IMG_HEIGHT + "//newheight:" + newHeight, new Throwable());
                RelativeLayout.LayoutParams layoutParams = new RelativeLayout.LayoutParams(newWidth, newHeight);
                holder.imgContent.setLayoutParams(layoutParams);
                Glide.with(context).load(item.TIMELINE_MP4_SCENE).bitmapTransform(new BitmapHeightResizeForGlide(context, newHeight)).into(holder.imgContent);
//                Glide.with(context).load(item.TIMELINE_MP4_SCENE).bitmapTransform(new BitmapHeightResizeForGlide(context, newHeight)).into(holder.imgMp4Scene);
            }
            new Handler().postDelayed(new Runnable() {
                @Override
                public void run() {
                    holder.imgBtnPlay.setVisibility(View.VISIBLE);
                    holder.imgMp4Scene.setVisibility(View.VISIBLE);
                    holder.videoView.setVisibility(View.VISIBLE);
                    holder.videoView.setVideoPath(item.TIMELINE_MP4);
                }
            }, 200);
            if (Build.VERSION.SDK_INT <= 17) {
                holder.videoView.setRotation(90);
            }
            handleVideo(holder);
        } else {
            /** 이미지일 때, **/
            holder.imgBtnPlay.setVisibility(View.GONE);
            holder.imgMp4Scene.setVisibility(View.GONE);
            holder.videoView.setVisibility(View.GONE);
            if (!TextUtil.isNull(item.TIMELINE_IMG)) {
                int newWidth, newHeight;
                newWidth = ToforUtil.PHONE_W;
                newHeight = Math.round(((float) newWidth / item.TIMELINE_IMG_WIDTH * item.TIMELINE_IMG_HEIGHT));
                RelativeLayout.LayoutParams layoutParams = new RelativeLayout.LayoutParams(newWidth, newHeight);
                holder.imgContent.setLayoutParams(layoutParams);
                Glide.with(context).load(item.TIMELINE_IMG).bitmapTransform(new BitmapHeightResizeForGlide(context, newHeight)).into(holder.imgContent);
            }
        }

        if (!TextUtil.isNull(item.MEMB_IMG)) {
            Picasso.with(context).load(item.MEMB_IMG)
                    .error(R.drawable.img_user_null2)
                    .transform(new BitmapCircleResize(context, context.getResources().getDimensionPixelOffset(R.dimen.dp_54)))
                    .into(holder.imgProfile);
        } else {
            holder.imgProfile.setImageResource(R.drawable.img_user_null2);
        }
        /** 프로필 뱃지 */
        boolean isSuperGreener = false, isBestGreener = false;
        if (!TextUtils.isEmpty(item.SUPERGREENER_YN) && item.SUPERGREENER_YN.equals(YN.YES))
            isSuperGreener = true;
        if (!TextUtils.isEmpty(item.BESTGREENER_YN) && item.BESTGREENER_YN.equals(YN.YES))
            isBestGreener = true;
        if (isSuperGreener || isBestGreener) {
            holder.imgBadge.setVisibility(View.VISIBLE);
            if (isSuperGreener && isBestGreener)
                holder.imgBadge.setBackgroundResource(R.drawable.icon_badge_both);
            else if (isSuperGreener)
                holder.imgBadge.setBackgroundResource(R.drawable.icon_badge_sg);
            else if (isBestGreener)
                holder.imgBadge.setBackgroundResource(R.drawable.icon_badge_bestpg);
        } else {
            holder.imgBadge.setVisibility(View.GONE);
        }

        holder.txtName.setText("");
        holder.txtRegistInfo.setText("");
        holder.txtLikeCount.setText("");
        holder.txtContent.setText("");
        holder.txtHashtag.setText("");
        holder.txtHashtag.setVisibility(View.GONE);
        holder.txtLikeCount.setVisibility(View.GONE);

        if (!TextUtil.isNull(item.MEMB_NAME))
            holder.txtName.setText(item.MEMB_NAME);

        if (item.REG_DT > 0) {
            holder.txtRegistInfo.setText(PlaygreenManager.getTimeStampToDate(item.REG_DT, true));
        }

        if (!TextUtil.isNull(item.LOCATION))
            holder.txtRegistInfo.append(" " + item.LOCATION);

        if (item.LIKE_COUNT > 0) {
            holder.txtLikeCount.setVisibility(View.VISIBLE);
            holder.txtLikeCount.setText(context.getString(R.string.str_like_count, item.LIKE_COUNT));
        }

        if (!TextUtil.isNull(item.OWN_YN) && item.OWN_YN.equals(YN.YES)) {
            holder.btnFollow.setVisibility(View.GONE);
        } else {
            holder.btnFollow.setVisibility(View.VISIBLE);
            if (!TextUtil.isNull(item.FRIEND_YN) && item.FRIEND_YN.equals(YN.YES))
                holder.btnFollow.setSelected(true);
            else
                holder.btnFollow.setSelected(false);
        }

        if (!TextUtil.isNull(item.LIKE_YN) && item.LIKE_YN.equals(YN.YES))
            holder.imgBtnLike.setImageResource(R.drawable.btn_like1_selected);
        else
            holder.imgBtnLike.setImageResource(R.drawable.btn_like1);


        /** TIMELINIE  CONTENT */
        if (!TextUtil.isNull(item.TIMELINE_TEXT)) {
            String timelineContent = "";
            try {
                timelineContent = URLDecoder.decode(item.TIMELINE_TEXT, "UTF-8");
            } catch (Exception e) {
                e.printStackTrace();
            }
            holder.txtContent.setText(timelineContent, mCollapsedStatus, position);
        }

        /** HASH TAG */
        if (item.HASHTAG_LIST != null && item.HASHTAG_LIST.size() > 0) {
            StringBuffer hashtag = new StringBuffer();
            holder.txtHashtag.setVisibility(View.VISIBLE);
            for (NetworkData hashtagItem : item.HASHTAG_LIST) {
                hashtag.append("#" + hashtagItem.HASHTAG + " ");
            }

            // 해시태그 각각 선택할수있게 Spannable Click
            SpannableString span = new SpannableString(hashtag.toString());
            for (final NetworkData hashtagItem : item.HASHTAG_LIST) {
                int startIndex = hashtag.toString().indexOf(hashtagItem.HASHTAG);
                span.setSpan(new ClickableSpan() {
                    @Override
                    public void onClick(View v) {
                        v.setTag(hashtagItem);
                        if (adapterItemClickListener != null)
                            adapterItemClickListener.onAdapterItemClick(v, position);
                    }

                    @Override
                    public void updateDrawState(TextPaint ds) {
                    }
                }, startIndex, startIndex + hashtagItem.HASHTAG.length(), Spanned.SPAN_INCLUSIVE_EXCLUSIVE);
            }
            holder.txtHashtag.setText(span);
            holder.txtHashtag.setMovementMethod(LinkMovementMethod.getInstance());

        }
    }


    public void handleVideo(final ViewHolder vh) {
        vh.videoView.setOnErrorListener(new MediaPlayer.OnErrorListener() {
            @Override
            public boolean onError(MediaPlayer mp, int what, int extra) {
                //TODO 에러처리
                return true;
            }
        });
        vh.videoView.setOnPreparedListener(new MediaPlayer.OnPreparedListener() {
            @Override
            public void onPrepared(final MediaPlayer mp) {
                //JYLog.D("TimeLineAdapter::setOnPreparedListener::getRotation::" + vh.videoView.getRotation(), new Throwable());
                //JYLog.D("TimeLineAdapter::setOnPreparedListener::getRotation::" + Build.VERSION.SDK_INT, new Throwable());
                mp.setVolume(0f, 0f);
                if (Build.VERSION.SDK_INT > 17) {
                    UIUtils.resizeView(vh.videoView, ToforUtil.PHONE_W, vh.imgContent.getHeight());
                }
            }
        });
        vh.videoView.setOnFocusChangeListener(new View.OnFocusChangeListener() {
            @Override
            public void onFocusChange(View v, boolean hasFocus) {
                if (!hasFocus) {
                    vh.videoView.pause();
                    vh.imgBtnPlay.setVisibility(View.VISIBLE);
                    vh.imgMp4Scene.setVisibility(View.VISIBLE);
                    isClickImgContent = false;
                }
            }
        });
        vh.videoView.setOnInfoListener(new MediaPlayer.OnInfoListener() {
            @Override
            public boolean onInfo(MediaPlayer mp, int what, int extra) {
                //JYLog.D("onInfo::what::" + what + "::extra::" + extra, new Throwable());
                switch (what) {
                    case MediaPlayer.MEDIA_INFO_VIDEO_RENDERING_START:
                        new Handler().postDelayed(new Runnable() {
                            @Override
                            public void run() {
                                if (vh.videoView.isPlaying()) {
                                    vh.pbVideo.setVisibility(View.INVISIBLE);
                                    vh.imgMp4Scene.setVisibility(View.GONE);
                                }
                            }
                        }, 30);
                        break;
                    case MediaPlayer.MEDIA_INFO_BUFFERING_START:
                        new Handler().postDelayed(new Runnable() {
                            @Override
                            public void run() {
                                if (!vh.videoView.isPlaying()) {
//                                    vh.imgBtnPlay.setVisibility(View.GONE);
                                    vh.imgMp4Scene.setVisibility(View.VISIBLE);
                                    vh.pbVideo.setVisibility(View.VISIBLE);
                                }
                            }
                        }, 10);
                        break;
                    case MediaPlayer.MEDIA_INFO_BUFFERING_END:
                        new Handler().postDelayed(new Runnable() {
                            @Override
                            public void run() {
                                if (!vh.videoView.isPlaying()) {
                                    vh.pbVideo.setVisibility(View.GONE);
                                }
                            }
                        }, 10);
                        break;
                }
                return true;
            }
        });
        vh.videoView.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
            @Override
            public void onCompletion(MediaPlayer mp) {
                //JYLog.D("complete", new Throwable());
                //vh.imgBtnPlay.setVisibility(View.VISIBLE);
                vh.videoView.requestFocus();
                vh.videoView.seekTo(0);
                vh.videoView.start();
            }
        });
        vh.imgContent.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (vh.videoView.isPlaying()) {
                    vh.videoView.pause();
                    vh.imgBtnPlay.setVisibility(View.VISIBLE);
                    vh.imgMp4Scene.setVisibility(View.VISIBLE);
                    isClickImgContent = true;
                }
            }
        });
        vh.imgBtnPlay.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                vh.imgBtnPlay.setVisibility(View.GONE);
                vh.videoView.requestFocus();
                vh.videoView.start();

                vh.imgBtnPlay.setVisibility(View.GONE);

                if (isClickImgContent) {
                    vh.imgMp4Scene.setVisibility(View.GONE);
                    isClickImgContent = false;
                } else {
                    new Handler().post(new Runnable() {
                        @Override
                        public void run() {
                            vh.imgMp4Scene.setVisibility(View.VISIBLE);
                            vh.pbVideo.setVisibility(View.VISIBLE);
                        }
                    });
                }

            }
        });
    }

    @Override
    public void onViewRecycled(ViewHolder holder) {
        holder.pbVideo.setVisibility(View.INVISIBLE);
        //holder.videoView.stopPlayback();
        super.onViewRecycled(holder);
    }


    @Override
    public int getItemCount() {
        if (itemArray == null) {
            return 0;
        }
        return itemArray.size();
    }

    public NetworkData getItem(int position) {
        if (itemArray == null || itemArray.size() <= position) return null;
        else return itemArray.get(position);
    }

    /**
     * View holder
     */
    public class ViewHolder extends RecyclerView.ViewHolder {
        public ImageView imgProfile, imgContent, imgMp4Scene, imgBadge;
        public TextView txtName, txtRegistInfo, txtLikeCount, txtHashtag;
        public Button btnFollow;
        public ImageButton imgBtnLike, imgBtnShare, imgBtnComment, imgBtnEtc, imgBtnPlay;
        public TextureVideoView videoView;
        public ProgressBar pbVideo;

        public ExpandableTextView txtContent;

        public ViewHolder(View v) {
            super(v);
            imgBadge = (ImageView) v.findViewById(R.id.img_icon_badge);
            imgProfile = (ImageView) v.findViewById(R.id.img_item_profile);
            imgContent = (ImageView) v.findViewById(R.id.img_item_content);
            imgMp4Scene = (ImageView) v.findViewById(R.id.img_item_mp4_scene);
            txtName = (TextView) v.findViewById(R.id.txt_item_name);
            txtRegistInfo = (TextView) v.findViewById(R.id.txt_item_regist_info);
            txtLikeCount = (TextView) v.findViewById(R.id.txt_item_like_count);
            txtHashtag = (TextView) v.findViewById(R.id.txt_item_hashtag);
            btnFollow = (Button) v.findViewById(R.id.btn_item_follow);
            imgBtnLike = (ImageButton) v.findViewById(R.id.btn_item_like);
            imgBtnShare = (ImageButton) v.findViewById(R.id.btn_item_share);
            imgBtnComment = (ImageButton) v.findViewById(R.id.btn_item_reply);
            imgBtnEtc = (ImageButton) v.findViewById(R.id.btn_item_etc);

            pbVideo = (ProgressBar) v.findViewById(R.id.pb_video_load);
            videoView = (TextureVideoView) v.findViewById(R.id.video_item_content);
            imgBtnPlay = (ImageButton) v.findViewById(R.id.btn_item_play);

            txtContent = (ExpandableTextView) v.findViewById(R.id.txt_item_content);

            txtLikeCount.setOnClickListener(clickListener);
            imgProfile.setOnClickListener(clickListener);
            btnFollow.setOnClickListener(clickListener);
            imgBtnLike.setOnClickListener(clickListener);
            imgBtnComment.setOnClickListener(clickListener);
            imgBtnShare.setOnClickListener(clickListener);
            imgBtnEtc.setOnClickListener(clickListener);
        }

        View.OnClickListener clickListener = new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (adapterItemClickListener != null)
                    adapterItemClickListener.onAdapterItemClick(v, getLayoutPosition());
            }
        };
    }

}